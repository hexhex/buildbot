# -*- python -*-
# ex: set syntax=python:

# locks

from buildbot import locks

# we globally lock racer, because racer is restarted by the dlplugin's tests
racer_lock = locks.MasterLock("racer")

# we lock "make install" exclusively against "make check" and "make distcheck" shared
# (if during a make install a check detects a partially installed plugin, the check will spuriously fail)
install_check_lock = locks.SlaveLock("installcheck")

# configuration

base_svnurl = 'https://dlvhex.svn.sourceforge.net/svnroot/dlvhex/'
base_instdir = '/var/lib/buildbot/instdirs/'

#boosts = ['1_42', '1_43', '1_44', '1_45', 'release', 'trunk'] 
boosts = ['1_42', '1_45', '1_46', 'release', 'trunk'] 

#compilers = ['g++-4.3', 'g++-4.4', 'g++-4.5', 'clang-2.8', 'clang-trunk']
compilers = \
{ # keys are used for creating directory names!
  'g++-4.3':
  {
    'CC':'gcc-4.3',
    'CXX':'g++-4.3',
    'PATHPREFIX':'',
  },
  'g++-4.5':
  {
    'CC':'gcc-4.5',
    'CXX':'g++-4.5',
    'PATHPREFIX':'',
  },
  'g++-snapshot':
  {
    'CC':'/usr/lib/gcc-snapshot/bin/gcc',
    'CXX':'/usr/lib/gcc-snapshot/bin/g++',
    'PATHPREFIX':'',
  },
  #'clang-2.8':
  #{
  #  'CC':'clang',
  #  'CXX':'clang++',
  #  'PATHPREFIX': base_instdir+'/clang-2.8/bin/:',
  #},
  'clang-2.9':
  {
    'CC':'clang',
    'CXX':'clang++',
    'PATHPREFIX': base_instdir+'/clang-2.9/bin/:',
  },
  'clang-trunk':
  {
    'CC': base_instdir+'/clang-trunk/bin/clang',
    'CXX': base_instdir+'/clang-trunk/bin/clang++',
    'PATHPREFIX': base_instdir+'/clang-trunk/bin/:',
  },
  #'clang-trunk-manualtest1':
  #{
  #  'CC': base_instdir+'/clang-trunk-manualtest1/bin/clang',
  #  'CXX': base_instdir+'/clang-trunk-manualtest1/bin/clang++',
  #  'PATHPREFIX': base_instdir+'/clang-trunk-manualtest1/bin/:',
  #},
  #'clang-trunk-manualtest2':
  #{
  #  'CC': base_instdir+'/clang-trunk-manualtest2/bin/clang',
  #  'CXX': base_instdir+'/clang-trunk-manualtest2/bin/clang++',
  #  'PATHPREFIX': base_instdir+'/clang-trunk-manualtest2/bin/:',
  #},
}

# the following describes all softwares we can test (independen from environments)
# first level is the dlvhex, second level are the plugins
dlvhexes = \
{ # keys are used for creating directory names!
  'trunk':
  {
    'svndir':'dlvhex/trunk',
    'release_version':False,
    'plugins':
    { # keys are used for creating directory names!
      'string':    { 'svndir': 'dlvhex-stringplugin/trunk', },
      'aggregate': { 'svndir': 'dlvhex-aggregateplugin/trunk', },
      'script':    { 'svndir': 'dlvhex-scriptplugin/trunk', },
      'wordnet':   { 'svndir': 'dlvhex-wordnetplugin/trunk', },
      'xpath':     { 'svndir': 'dlvhex-xpathplugin/trunk', },
      'dl': {
        'svndir': 'dlvhex-dlplugin/trunk',
        'locks': [ racer_lock.access('exclusive') ],
      },
      'mcsie':     { 'svndir': 'dlvhex-mcs/mcs-ie/trunk', },
    }
  },
  'refactoringbranch':
  {
    'svndir':'dlvhex/branches/dlvhex-refactoring',
    'release_version':False,
    'plugins':
    { # keys are used for creating directory names!
    }
  },
  #'refactoringbranch-reproduceclangsegfault':
  #{
  #  'svndir':'dlvhex/branches/dlvhex-refactoring-reproduceclangsegfault',
  #  'incompatible_compilers': ['g++-snapshot','g++-4.3'],
  #  'release_version':False,
  #  'plugins':
  #  { # keys are used for creating directory names!
  #  }
  #},
  '1.7.2':
  {
    'svndir':'dlvhex/tags/Release_1_7_2',
    'incompatible_compilers': ['clang-trunk','clang-2.8','clang-2.9'],
    'release_version':True,
    'plugins':
    { # keys are used for creating directory names!
      'string':    { 'svndir':    'dlvhex-stringplugin/tags/Release_1_7_0', },
      'aggregate': { 'svndir': 'dlvhex-aggregateplugin/tags/Release_1_7_0', },
      'script':    { 'svndir':    'dlvhex-scriptplugin/tags/Release_1_7_1', },
      'wordnet':   { 'svndir':   'dlvhex-wordnetplugin/tags/Release_1_7_0', },
      'dl': {
        'svndir': 'dlvhex-dlplugin/tags/Release_1_7_1',
        'locks': [ racer_lock.access('exclusive') ],
      },
      'mcsie':     { 'svndir': 'dlvhex-mcs/mcs-ie/tags/Release_1_7_1', },
    }
  },
}

# TODO semweb dlvhex-rdfplugin tests: they use other repo, can we integrate it here nevertheless?

# environments:
#
# first we create environments for building dlvhex:
# each dlvhex environment uses a certain compiler and a certain boost version.
# for each dlvhex environment and each dlvhex branch, a corresponding builder is created,
# this builder triggers schedulers for all plugins using that dlvhex

environments = {}
for b in boosts:
  currentbenv = {
    'PATH' : '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
    'BOOST_ROOT' : base_instdir+'boost-'+b,
    #'LDFLAGS' : '-L'+base_instdir+'boost-'+b+'/lib/',
    #'CPPFLAGS' : '-I'+base_instdir+'boost-'+b+'/include/',
  }
  for toolid in compilers:
    if (toolid[:5] == 'clang') and (b != 'trunk') and (b != 'release') and (b != '1_46'):
      continue
    compiler = compilers[toolid]
    currentenv = currentbenv.copy()
    currentenv['PATH'] = compiler['PATHPREFIX']+currentenv['PATH']
    currentenv['CC'] = compiler['CC']
    #currentenv['LD'] = compiler['CC']
    currentenv['CXX'] = compiler['CXX']
    #currentenv['LDXX'] = compiler['CXX']
    envname = 'boost-%s-%s' % (b,toolid)
    currentenv['buildbot_boost_id'] = b
    currentenv['buildbot_compiler_id'] = toolid
    environments[envname] = currentenv

c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("dlvhex-slave", "dlvhex-pwd", max_builds=3)]
c['slavePortnum'] = 10013

####### CHANGESOURCES

# TODO

####### SCHEDULERS

from buildbot.scheduler import Nightly, Triggerable

c['schedulers'] = []
c['schedulers'].append(Nightly(name="dlvhex-nightly",
                               builderNames=[
#                                "dlvhex-1.7.2-boost-1_45-g++-4.5-builder",
#                                "dlvhex-1.7.2-boost-release-g++-4.5-builder",
                                "dlvhex-trunk-boost-1_42-g++-4.5-builder",
                                "dlvhex-trunk-boost-1_45-g++-4.5-builder",
                                "dlvhex-trunk-boost-release-g++-4.5-builder",
                                "dlvhex-trunk-boost-trunk-g++-4.5-builder",
                                "dlvhex-trunk-boost-1_42-g++-snapshot-builder",
                                "dlvhex-trunk-boost-1_45-g++-snapshot-builder",
                                "dlvhex-trunk-boost-release-g++-snapshot-builder",
                                "dlvhex-trunk-boost-trunk-g++-snapshot-builder",
                                "dlvhex-trunk-boost-trunk-clang-trunk-builder",
                                "dlvhex-trunk-boost-release-clang-trunk-builder",
                                "dlvhex-refactoringbranch-boost-1_46-clang-2.9-builder",
                                "dlvhex-refactoringbranch-boost-release-clang-2.9-builder",
                                "dlvhex-refactoringbranch-boost-release-clang-trunk-builder",
                                "dlvhex-refactoringbranch-boost-release-g++-4.5-builder",
                                "dlvhex-refactoringbranch-boost-release-g++-4.3-builder",
                                "dlvhex-refactoringbranch-boost-trunk-clang-trunk-builder",
                                "dlvhex-refactoringbranch-boost-trunk-g++-4.5-builder",
                               ],
                               hour=3,
                               minute=30))

####### BUILDERS

from buildbot.steps import source, shell, trigger
from buildbot.process import factory

# now create builders for dlvhexes

# we store builders/schedulers into a dictionary { <buildername> : <builder> }
# and then convert this dictionary into [ <builder> ] as required by buildbot

dlvhex_builders = {}
plugin_builders = {}
plugin_schedulers = {}
for envid in environments:
  for branchid in dlvhexes:
    builddir = 'dlvhex-%s-%s' % (branchid,envid)
    instdir = builddir
    buildername = builddir+'-builder'
    print 'creating builder "%s" for envid "%s" branchid "%s"' % (buildername,envid,branchid)

    env = environments[envid]
    plugin_env = env.copy()
    print "environment = ", plugin_env
    plugin_env['PKG_CONFIG_PATH'] = base_instdir + instdir + '/lib/pkgconfig/'+':/usr/lib/pkgconfig/'
    plugin_env['PATH'] = base_instdir + instdir + '/bin/:'+plugin_env['PATH']

    release_version = dlvhexes[branchid]['release_version']
    svndir = dlvhexes[branchid]['svndir']
    if ('incompatible_compilers' in dlvhexes[branchid]) and \
       (env['buildbot_compiler_id'] in dlvhexes[branchid]['incompatible_compilers']):
      print 'skipping builder "%s" due to incompatible compiler' % (buildername,)
      continue

    # create plugin builders triggerable by this dlvhex builder
    plugin_schedulers_to_trigger = []
    for pluginid in dlvhexes[branchid]['plugins']:
      plugin = dlvhexes[branchid]['plugins'][pluginid]

      plugin_svndir = plugin['svndir']
      plugin_locks = []
      if 'locks' in plugin:
        plugin_locks = plugin['locks']

      plugin_builddir = 'plugin-%s-dlvhex-%s-%s' % (pluginid,branchid,envid)
      plugin_instdir = instdir
      plugin_buildername = plugin_builddir+'-builder'
      print 'creating builder "%s"' % (plugin_buildername,)

      pf = factory.BuildFactory()
      pf.addStep(source.SVN(
        mode='update',
        svnurl=base_svnurl + plugin_svndir,
        #always_purge=False,
        haltOnFailure=True,
        flunkOnFailure=(not release_version)))
      pf.addStep(shell.ShellCommand(
        name='bootstrap',
        command=['./bootstrap.sh'],
        haltOnFailure=True))
      # attempt make clean (never fail) to allow for clean reconfigure
      pf.addStep(shell.ShellCommand(
        name='make clean',
        command=['make','clean'],
        haltOnFailure=False,
        flunkOnFailure=False))
      pf.addStep(shell.ShellCommand(
        name='configure',
        command=['./configure', '--prefix='+base_instdir+plugin_instdir],
        haltOnFailure=True))
      # first uninstall to make sure nothing interferes!
      pf.addStep(shell.ShellCommand(
        name='make uninstall',
        command=['make','uninstall'],
        haltOnFailure=False,
        flunkOnFailure=False,
        locks=[install_check_lock.access('exclusive')]))
      pf.addStep(shell.ShellCommand(
        name='make',
        command=['make'],
        haltOnFailure=True))
      pf.addStep(shell.ShellCommand(
        name='make check',
        command=['make', 'check'],
        haltOnFailure=False,
        locks=plugin_locks + [install_check_lock.access('counting')]))
      pf.addStep(shell.ShellCommand(
        name='make distcheck',
        command=['make', 'distcheck'],
        haltOnFailure=False,
        warnOnFailure=True,
        locks=plugin_locks + [install_check_lock.access('counting')]))
      pf.addStep(shell.ShellCommand(
        name='make install',
        command=['make', 'install'],
        locks=[install_check_lock.access('exclusive')]))
      pbuilder = {
        'name': plugin_buildername,
        'slavename': 'dlvhex-slave',
        'builddir': plugin_builddir,
        'factory': pf,
        'env': plugin_env,
      }
      plugin_builders[plugin_buildername] = pbuilder
      plugin_schedulers[plugin_buildername] = Triggerable(
        name=plugin_buildername,builderNames=[plugin_buildername])
      plugin_schedulers_to_trigger.append(plugin_buildername)

    # create dlvhex builder, triggering plugin builder schedulers
    f = factory.BuildFactory()
    f.addStep(source.SVN(
      mode='update',
      svnurl=base_svnurl + svndir,
      #always_purge=False,
      haltOnFailure=True,
      flunkOnFailure=(not release_version)))
    f.addStep(shell.ShellCommand(
      name='bootstrap',
      command=['./bootstrap.sh'],
      haltOnFailure=True))
    # attempt make clean (never fail) to allow for clean reconfigure
    f.addStep(shell.ShellCommand(
      name='make clean',
      command=['make','clean'],
      haltOnFailure=False,
      flunkOnFailure=False))
    f.addStep(shell.ShellCommand(
      name='configure',
      command=['./configure', '--prefix='+base_instdir+instdir],
      haltOnFailure=True))
    # first uninstall to make sure nothing interferes!
    f.addStep(shell.ShellCommand(
      name='make uninstall',
      command=['make','uninstall'],
      haltOnFailure=False,
      flunkOnFailure=False,
      locks=[install_check_lock.access('exclusive')]))
    f.addStep(shell.ShellCommand(
      name='make',
      command=['make'],
      haltOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='make check',
      command=['make', 'check'],
      haltOnFailure=False,
      locks=[install_check_lock.access('counting')]))
    f.addStep(shell.ShellCommand(
      name='make distcheck',
      command=['make', 'distcheck'],
      haltOnFailure=False,
      warnOnFailure=True,
      locks=[install_check_lock.access('counting')]))
    f.addStep(shell.ShellCommand(
      name='make install',
      command=['make', 'install'],
      locks=[install_check_lock.access('exclusive')]))
    if len(plugin_schedulers_to_trigger) > 0:
      f.addStep(trigger.Trigger(
        schedulerNames=plugin_schedulers_to_trigger,
        waitForFinish=False,
        updateSourceStamp=True)) # updateSourceStamp = ensure that plugins use same revision as dlvhex
    builder = {
      'name': buildername,
      'slavename': 'dlvhex-slave',
      'builddir': builddir,
      'factory': f,
      'env': env.copy(),
    }
    dlvhex_builders[buildername] = builder

c['builders'] = list(dlvhex_builders.itervalues()) + list(plugin_builders.itervalues())
c['schedulers'] += list(plugin_schedulers.itervalues())
     
####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8013,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(
    fromaddr="buildbot@gluck.kr.tuwien.ac.at",
    extraRecipients=["dlvhex-nightlies@lists.sourceforge.net"],
    sendToInterestedUsers=False,
    relayhost="wagner.kr.tuwien.ac.at",
	))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

c['projectName'] = "dlvhex"
c['projectURL'] = "http://www.kr.tuwien.ac.at/research/systems/dlvhex/"
c['buildbotURL'] = "http://gluck.kr.tuwien.ac.at:8013/"
