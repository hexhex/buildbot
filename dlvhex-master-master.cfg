# -*- python -*-
# ex: set syntax=python:

# locks

# we globally lock racer, because racer is restarted by the dlplugin's tests
from buildbot import locks
racer_lock = locks.MasterLock("racer")

# configuration

base_svnurl = 'https://dlvhex.svn.sourceforge.net/svnroot/dlvhex/'
base_instdir = '/var/lib/buildbot/instdir/'

#boosts = ['1_42', '1_43', '1_44', '1_45', 'release', 'trunk'] 
boosts = ['1_42', 'release', 'trunk'] 

#compilers = ['g++-4.3', 'g++-4.4', 'g++-4.5', 'clang-2.8', 'clang-trunk']
compilers = ['g++-4.5', 'clang-trunk']

dlvhexes = { # keys are used for creating directory names!
  'trunk': { 'svndir':'dlvhex/trunk' },
  '1.7.2': { 'svndir':'dlvhex/tags/Release_1_7_2' },
}

plugins = { # keys are used for creating directory names!
  'string': {
    'svndir': 'dlvhex-stringplugin/trunk',
    'dlvhex_compat': ['trunk'] # compatible dlvhex build
  },
  'aggregate': {
    'svndir': 'dlvhex-aggregateplugin/trunk',
    'dlvhex_compat': ['trunk'],
  },
  'script': {
    'svndir': 'dlvhex-scriptplugin/trunk',
    'dlvhex_compat': ['trunk'],
  },
  'wordnet': {
    'svndir': 'dlvhex-wordnetplugin/trunk',
    'dlvhex_compat': ['trunk'],
  },
  'dl': {
    'svndir': 'dlvhex-dlplugin/trunk',
    'dlvhex_compat': ['trunk'],
    'locks': [ racer_lock.access('exclusive') ],
  },
  'mcsie': {
    'svndir': 'dlvhex-mcs/mcs-ie/trunk',
    'dlvhex_compat': ['trunk'],
  },
}

# todo: put semweb dlvhex-rdfplugin tests into separate master, as they use other repo? or just do extra triggerable nightly?

# dlvhex environments:
#
# first we create environments for building dlvhex:
# each dlvhex environment uses a certain compiler and a certain boost version.
# for each dlvhex environment and each dlvhex branch, a corresponding builder is created,
# this builder triggers schedulers for all plugins using that dlvhex

dlvhex_environments = {}
for b in boosts:
  currentbenv = {
    'PATH' : '/usr/sbin:/usr/bin:/sbin:/bin',
    'LD_LIBRARY_PATH' : base_instdir+'boost-'+b+'/lib/',
    'LDFLAGS' : '-L'+base_instdir+'boost-'+b+'/lib/',
    'CPPFLAGS' : '-I'+base_instdir+'boost-'+b+'/include/',
  }
  for tool in compilers:
    currentenv = currentbenv.copy()
    if tool[:6] == 'clang-':
      currentenv['PATH'] += ':'+base_instdir+'/'+tool+'/bin/'
      currentenv['CXX'] = 'clang++'
      currentenv['LDXX'] = 'clang++'
    else:
      if tool[:4] == 'g++-':
        currentenv['CXX'] = tool 
        currentenv['LDXX'] = tool 
      else:
        raise 'unknown compiler ' + tool
    envname = 'boost-%s-%s' % (b,tool)
    dlvhex_environments[envname] = currentenv.copy()

# plugin environments:
#
# dlvhex environments are extended to plugin environments:
# each plugin environment uses a certain compiler and a certain boost
# version and a certain dlvhex built using that compiler and boost version.
# for each plugin environment and each plugin, a corresponding builder is created,
# along with a triggerable scheduler.

plugin_environments = {}
for dlvhexenvid in dlvhex_environments:
  for branchid in dlvhexes:
    instdir = 'dlvhex-%s-%s' % (branchid,dlvhexenvid)

    thisenv = dlvhex_environments[dlvhexenvid].copy()
    thisenv['PKG_CONFIG_PATH'] = base_instdir + instdir + '/lib/pkgconfig/'
    # remember from which dlvhex branch and env this environment comes
    thisenv['dlvhexbranch'] = branchid
    thisenv['dlvhexenvid'] = dlvhexenvid

    plugin_environments[instdir] = thisenv


c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("dlvhex-slave", "dlvhex-pwd", max_builds=4)]
c['slavePortnum'] = 10013

####### CHANGESOURCES

# TODO

####### SCHEDULERS

from buildbot.scheduler import Scheduler, Nightly
c['schedulers'] = []
c['schedulers'].append(Nightly(name="dlvhex-nightly",
                               builderNames=[
                                "dlvhex-1.7.2-boost-trunk-clang-trunk-builder",
                                "dlvhex-1.7.2-boost-release-clang-trunk-builder",
                                "dlvhex-1.7.2-boost-trunk-g++-4.5-builder",
                                "dlvhex-1.7.2-boost-release-g++-4.5-builder",
                                "dlvhex-trunk-boost-trunk-clang-trunk-builder",
                                "dlvhex-trunk-boost-release-clang-trunk-builder",
                                "dlvhex-trunk-boost-trunk-g++-4.5-builder",
                                "dlvhex-trunk-boost-release-g++-4.5-builder",
                               ],
                               hour=3,
                               minute=30))

####### BUILDERS

from buildbot.steps import source, shell, trigger
from buildbot.process import factory

# now create builders for plugins

# we store builders into a dictionary:
# plugin_builders = { <buildername> : <builder> }
# and then convert this dictionary into [ <builder> ] as required by buildbot

# which plugin schedulers shall be triggered by which dlvhex builders
to_trigger = {}

plugin_builders = {}
for envid in plugin_environments:
  for pluginid in plugins:
    plugin = plugins[pluginid]
    env = plugin_environments[envid].copy()

    # only use plugins compatible with the environment
    if env['dlvhexbranch'] not in plugin['dlvhex_compat']:
      continue

    svndir = plugin['svndir']
    locks = None
    if 'locks' in plugin:
      locks = plugin['locks']

    instdir = 'plugin-%s-%s' % (pluginid,envid)
    buildername = instdir+'-builder'
    print 'creating builder "%s" for envid "%s" pluginid "%s"' % (buildername,envid,pluginid)

    triggeringthis = 'dlvhex-%s-%s-builder' % (env['dlvhexbranch'],env['dlvhexenvid'])
    if triggeringthis not in to_trigger:
      to_trigger[triggeringthis] = []
    to_trigger[triggeringthis].append(instdir+'-trigger-scheduler')

    f = factory.BuildFactory()
    f.addStep(source.SVN(
      mode='update',
      svnurl=base_svnurl + svndir,
      always_purge=False))
    f.addStep(shell.ShellCommand(
      name='bootstrap',
      command=['./bootstrap.sh'],
      haltOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='configure',
      command=['./configure', '--prefix='+base_instdir+instdir],
      haltOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='make',
      command=['make'],
      haltOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='make check',
      command=['make', 'check'],
      haltOnFailure=False))
    f.addStep(shell.ShellCommand(
      name='make distcheck',
      command=['make', 'distcheck'],
      haltOnFailure=False,
      warnOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='make install',
      command=['make', 'install']))
    builder = {
      'name': buildername,
      'slavename': 'dlvhex-slave',
      'builddir': instdir,
      'factory': f,
      'env': env,
    }
    plugin_builders[buildername] = builder

# now create builders for dlvhexes

# we store builders into a dictionary:
# dlvhex_builders = { <buildername> : <builder> }
# and then convert this dictionary into [ <builder> ] as required by buildbot

dlvhex_builders = {}
for dlvhexenv in dlvhex_environments:
  for branchid in dlvhexes:
    envid = dlvhexenv
    env = dlvhex_environments[envid].copy()
    svndir = dlvhexes[branchid]['svndir']
    instdir = 'dlvhex-%s-%s' % (branchid,envid)
    buildername = instdir+'-builder'
    print 'creating builder "%s" for envid "%s" branchid "%s"' % (buildername,envid,branchid)

    # which schedulers are triggered by success of this build? (modulo warnings)
    triggered = []
    if buildername in to_trigger:
      triggered = to_trigger[buildername]

    f = factory.BuildFactory()
    f.addStep(source.SVN(
      mode='update',
      svnurl=base_svnurl + svndir,
      always_purge=False))
    f.addStep(shell.ShellCommand(
      name='bootstrap',
      command=['./bootstrap.sh'],
      haltOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='configure',
      command=['./configure', '--prefix='+base_instdir+instdir],
      haltOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='make',
      command=['make'],
      haltOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='make check',
      command=['make', 'check'],
      haltOnFailure=False))
    f.addStep(shell.ShellCommand(
      name='make distcheck',
      command=['make', 'distcheck'],
      haltOnFailure=False,
      warnOnFailure=True))
    f.addStep(shell.ShellCommand(
      name='make install',
      command=['make', 'install']))
    if len(triggered) > 0:
      f.addStep(trigger.Trigger(
        schedulerNames=triggered,
        waitForFinish=False))
    builder = {
      'name': buildername,
      'slavename': 'dlvhex-slave',
      'builddir': instdir,
      'factory': f,
      'env': env,
    }
    dlvhex_builders[buildername] = builder

c['builders'] = list(dlvhex_builders.itervalues()) + list(plugin_builders.itervalues())
     
####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8013,allowForce=True))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@gluck.kr.tuwien.ac.at",
                                     extraRecipients=["ps@kr.tuwien.ac.at"],
                                     sendToInterestedUsers=False,
                                     relayhost="wagner.kr.tuwien.ac.at",
				)
		)


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

c['projectName'] = "dlvhex"
c['projectURL'] = "http://www.kr.tuwien.ac.at/research/systems/dlvhex/"
c['buildbotURL'] = "http://gluck.kr.tuwien.ac.at:8013/"
