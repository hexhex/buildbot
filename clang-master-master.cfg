# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("clang-slave", "clang-pwd", max_builds=2)]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 10011

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes
# from buildbot.changes.svnpoller import SVNPoller
# source_code_svn_url='https://svn.myproject.org/bluejay/trunk'
# svn_poller = SVNPoller(
#                    svnurl=source_code_svn_url,
#                    pollinterval=60*60, # seconds
#                    histmax=10,
#                    svnbin='/usr/bin/svn',
## )
# c['sources'] = [ svn_poller ]

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler, Nightly
c['schedulers'] = []
c['schedulers'].append(Nightly(name="clang-nightly",
                               builderNames=["clang-trunk-builder"],
                               hour=1,
                               minute=00))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

#cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
#cvsmodule = "buildbot"
#
#from buildbot.process import factory
#from buildbot.steps.source import CVS
#from buildbot.steps.shell import Compile
#from buildbot.steps.python_twisted import Trial
#f1 = factory.BuildFactory()
#f1.addStep(CVS(cvsroot=cvsroot, cvsmodule=cvsmodule, login="", mode="copy"))
#f1.addStep(Compile(command=["python", "./setup.py", "build"]))
#f1.addStep(Trial(testChanges=True, testpath="."))
#
#b1 = {'name': "buildbot-full",
#      'slavename': "bot1name",
#      'builddir': "full",
#      'factory': f1,
#      }
#c['builders'] = [b1]

from buildbot.steps import source, shell
from buildbot.process import factory

import re

def extractFailureCount(rc,stdout,stderr):
  found = re.findall(r'Unexpected Failures: ([0-9]+)', stdout+stderr)
  print repr(found)
  if found != None:
    return { 'test_failures' : found }
  else:
    return {}
     
def createClangBuildFactory(branch,instdir):
  f = factory.BuildFactory()
  # llvm repo
  f.addStep(source.SVN(
    name='svn (llvm)',
    mode='update',
    svnurl='http://llvm.org/svn/llvm-project/llvm/' + branch,
    always_purge=True))
  # clang repo within llvm (no combined repo!)
  f.addStep(source.SVN(
    name='svn (cfe)',
    mode='update',
    svnurl='http://llvm.org/svn/llvm-project/cfe/' + branch,
    workdir='build/tools/clang/',
    always_purge=True))
  f.addStep(shell.Configure(
    command=[
      './configure',
      '--prefix=/var/lib/buildbot/instdirs/'+instdir,
      '--enable-optimized',
      '--enable-targets=host,x86,x86_64'],
    env={ 'CXX':'g++-4.5', 'CC':'gcc-4.5' },
    flunkOnFailure=True))
  f.addStep(shell.ShellCommand(
    name='build',
    command=['make'],
    haltOnFailure=True,
    flunkOnFailure=True)) # make clang-only seems to break the tests
  f.addStep(shell.SetProperty(
    name='test',
    workdir='build/tools/clang/',
    command=['make', 'test'],
    haltOnFailure=False,
    warnOnFailure=True,
    flunkOnFailure=False,
    flunkOnWarnings=False,
    extract_fn=extractFailureCount))
  f.addStep(shell.ShellCommand(
    name='install',
    command=['make', 'install-clang']))
  return f

b_clang_trunk = {
	'name': 'clang-trunk-builder',
	'slavename': 'clang-slave',
	'builddir': 'trunk',
	'factory': createClangBuildFactory('trunk/', 'clang-trunk/')
}

b_clang_trunk_test1 = {
	'name': 'clang-trunk-builder-manualtest1',
	'slavename': 'clang-slave',
	'builddir': 'manualtest1',
	'factory': createClangBuildFactory('trunk/', 'clang-trunk-manualtest1/')
}

b_clang_trunk_test2 = {
	'name': 'clang-trunk-builder-manualtest2',
	'slavename': 'clang-slave',
	'builddir': 'manualtest2',
	'factory': createClangBuildFactory('trunk/', 'clang-trunk-manualtest2/')
}

b_clang_r28 = {
	'name': 'clang-2.8-builder',
	'slavename': 'clang-slave',
	'builddir': 'branch_2.8',
	'factory': createClangBuildFactory('branches/release_28/', 'clang-2.8/')
}

b_clang_r29 = {
	'name': 'clang-2.9-builder',
	'slavename': 'clang-slave',
	'builddir': 'branch_2.9',
	'factory': createClangBuildFactory('branches/release_29/', 'clang-2.9/')
}

c['builders'] = [b_clang_trunk, b_clang_r28, b_clang_r29, b_clang_trunk_test1, b_clang_trunk_test2]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8011,allowForce=True))

from buildbot.status import mail

class CustomMailNotifier(mail.MailNotifier):
  def __init__(self, *args, **kwargs):
    mail.MailNotifier.__init__(self, messageFormatter=self.myMessageFormatter, *args, **kwargs)

  def myMessageFormatter(self, mode, name, build, results, master_status):
    from buildbot.status.builder import Results
    # that's why we derive
    default = self.defaultMessage(mode, name, build, results, master_status)
    resultprefix = ','.join(build.getProperty('test_failures'))
    if resultprefix != '':
      resultprefix = resultprefix + ' '
    default['subject'] = self.subject % {
      'result': resultprefix + Results[results],
      'projectName': master_status.getProjectName(),
      'builder': name,
    }
    return default

c['status'].append(CustomMailNotifier(fromaddr="buildbot@gluck.kr.tuwien.ac.at",
                                     extraRecipients=["ps@kr.tuwien.ac.at"],
                                     sendToInterestedUsers=False,
                                     relayhost="wagner.kr.tuwien.ac.at",
				)
		)



# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "clang"
c['projectURL'] = "http://clang.llvm.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://gluck.kr.tuwien.ac.at:8011/"
